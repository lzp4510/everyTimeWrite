# python
从零开始工作随时记录
一、零基础

   1.print   打印

      str[2:5]    第三个字符到第五个字符

      字符串中加反斜杠(\)+n转义特殊字符换行

      字符串前加r表示原始字符串，不会发生转义

      打印的时候   加上end=" "可以让打印内容不换行

      在 python 用 import 或者 from...import 来导入相应的模块。

      将整个模块(somemodule)导入，格式为： import somemodule

      从某个模块中导入某个函数,格式为： from somemodule import somefunction

      从某个模块中导入多个函数,格式为： from somemodule import firstfunc, secondfunc, thirdfunc

      将某个模块中的全部函数导入，格式为： from somemodule import *

      a = set('abracadabra')
      b = set('alacazam')

      print(a)

      print(a - b)     # a 和 b 的差集

      print(a | b)     # a 和 b 的并集

      print(a & b)     # a 和 b 的交集

      print(a ^ b)     # a 和 b 中不同时存在的元素


   2.字典
      dict = {}
      dict['one'] = "1 - 菜鸟教程"
      dict[2]     = "2 - 菜鸟工具"

      tinydict = {'name': 'runoob','code':1, 'site': 'www.runoob.com'}


      print (dict['one'])       # 输出键为 'one' 的值
      print (dict[2])           # 输出键为 2 的值
      print (tinydict)          # 输出完整的字典
      print (tinydict.keys())   # 输出所有键
      print (tinydict.values()) # 输出所有值
   3.列表
      a、操作列表方法
         1	list.append(obj)
           在列表末尾添加新的对象
         2	list.count(obj)
           统计某个元素在列表中出现的次数
         3	list.extend(seq)
           在列表末尾一次性追加另一个序列中的多个值（用新列表扩展原来的列表）
         4	list.index(obj)
           从列表中找出某个值第一个匹配项的索引位置
         5	list.insert(index, obj)
           将对象插入列表
         6	list.pop([index=-1])
           移除列表中的一个元素（默认最后一个元素），并且返回该元素的值
         7	list.remove(obj)
           移除列表中某个值的第一个匹配项
         8	list.reverse()
           反向列表中元素
         9	list.sort( key=None, reverse=False)
           对原列表进行排序
         10	list.clear()
           清空列表
         11	list.copy()
           复制列表
       b、列表函数
         1	len(list)
           列表元素个数
         2	max(list)
           返回列表元素最大值
         3	min(list)
           返回列表元素最小值
         4	list(seq)
           将元组转换为列表
    4.字典内置函数
       a、1	len(dict)
            计算字典元素个数，即键的总数。	
          2	str(dict)
            输出字典，以可打印的字符串表示。	
          3	type(variable)
            返回输入的变量类型，如果变量是字典就返回字典类型。
        b、1	radiansdict.clear()
             删除字典内所有元素
           2	radiansdict.copy()
             返回一个字典的浅复制
           3	radiansdict.fromkeys()
             创建一个新字典，以序列seq中元素做字典的键，val为字典所有键对应的初始值
           4	radiansdict.get(key, default=None)
             返回指定键的值，如果值不在字典中返回default值
           5	key in dict
             如果键在字典dict里返回true，否则返回false
           6	radiansdict.items()
             以列表返回可遍历的(键, 值) 元组数组
           7	radiansdict.keys()
             返回一个迭代器，可以使用 list() 来转换为列表
           8	radiansdict.setdefault(key, default=None)
             和get()类似, 但如果键不存在于字典中，将会添加键并将值设为default
           9	radiansdict.update(dict2)
             把字典dict2的键/值对更新到dict里
           10	radiansdict.values()
             返回一个迭代器，可以使用 list() 来转换为列表
           11	pop(key[,default])
             删除字典给定键 key 所对应的值，返回值为被删除的值。key值必须给出。 否则，返回default值。
           12	popitem()
             随机返回并删除字典中的最后一对键和值。
     5.集合内置方法
        add()	为集合添加元素
        clear()	移除集合中的所有元素
        copy()	拷贝一个集合
        difference()	返回多个集合的差集
        difference_update()	移除集合中的元素，该元素在指定的集合也存在。
        discard()	删除集合中指定的元素
        intersection()	返回集合的交集
        intersection_update()	返回集合的交集。
        isdisjoint()	判断两个集合是否包含相同的元素，如果没有返回 True，否则返回 False。
        issubset()	判断指定集合是否为该方法参数集合的子集。
        issuperset()	判断该方法的参数集合是否为指定集合的子集
        pop()	随机移除元素
        remove()	移除指定元素
        symmetric_difference()	返回两个集合中不重复的元素集合。
        symmetric_difference_update()	移除当前集合中在另外一个指定集合相同的元素，并将另外一个指定集合中不同的元素插入到当前集合中。
        union()	返回两个集合的并集
        update()	给集合添加元素
     6.斐波那契数列
            #!/usr/bin/python3
            # Fibonacci series: 斐波纳契数列
            # 两个元素的总和确定了下一个数
            a, b = 0, 1
            while b < 1000:
                print(b, end=',')
                a, b = b, a+b
      
     7.迭代器与生成器
        a、迭代器
           class MyNumbers:
              def __iter__(self):
                self.a = 1
                return self

              def __next__(self):
                if self.a <= 20:
                  x = self.a
                  self.a += 1
                  return x
                else:
                  raise StopIteration

            myclass = MyNumbers()
            myiter = iter(myclass)

            for x in myiter:
              print(x)
        b、生成器
           
     8.面向对象
        
