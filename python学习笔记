# python
从零开始工作随时记录
一、零基础

   1.print   打印

      str[2:5]    第三个字符到第五个字符

      字符串中加反斜杠(\)+n转义特殊字符换行

      字符串前加r表示原始字符串，不会发生转义

      打印的时候   加上end=" "可以让打印内容不换行

      在 python 用 import 或者 from...import 来导入相应的模块。

      将整个模块(somemodule)导入，格式为： import somemodule

      从某个模块中导入某个函数,格式为： from somemodule import somefunction

      从某个模块中导入多个函数,格式为： from somemodule import firstfunc, secondfunc, thirdfunc

      将某个模块中的全部函数导入，格式为： from somemodule import *

      a = set('abracadabra')
      b = set('alacazam')

      print(a)

      print(a - b)     # a 和 b 的差集

      print(a | b)     # a 和 b 的并集

      print(a & b)     # a 和 b 的交集

      print(a ^ b)     # a 和 b 中不同时存在的元素


   2.字典
      dict = {}
      dict['one'] = "1 - 菜鸟教程"
      dict[2]     = "2 - 菜鸟工具"

      tinydict = {'name': 'runoob','code':1, 'site': 'www.runoob.com'}


      print (dict['one'])       # 输出键为 'one' 的值
      print (dict[2])           # 输出键为 2 的值
      print (tinydict)          # 输出完整的字典
      print (tinydict.keys())   # 输出所有键
      print (tinydict.values()) # 输出所有值
   3.列表
      a、操作列表方法
         1	list.append(obj)
           在列表末尾添加新的对象
         2	list.count(obj)
           统计某个元素在列表中出现的次数
         3	list.extend(seq)
           在列表末尾一次性追加另一个序列中的多个值（用新列表扩展原来的列表）
         4	list.index(obj)
           从列表中找出某个值第一个匹配项的索引位置
         5	list.insert(index, obj)
           将对象插入列表
         6	list.pop([index=-1])
           移除列表中的一个元素（默认最后一个元素），并且返回该元素的值
         7	list.remove(obj)
           移除列表中某个值的第一个匹配项
         8	list.reverse()
           反向列表中元素
         9	list.sort( key=None, reverse=False)
           对原列表进行排序
         10	list.clear()
           清空列表
         11	list.copy()
           复制列表
       b、列表函数
         1	len(list)
           列表元素个数
         2	max(list)
           返回列表元素最大值
         3	min(list)
           返回列表元素最小值
         4	list(seq)
           将元组转换为列表
    4.字典内置函数
       a、1	len(dict)
            计算字典元素个数，即键的总数。	
          2	str(dict)
            输出字典，以可打印的字符串表示。	
          3	type(variable)
            返回输入的变量类型，如果变量是字典就返回字典类型。
        b、1	radiansdict.clear()
             删除字典内所有元素
           2	radiansdict.copy()
             返回一个字典的浅复制
           3	radiansdict.fromkeys()
             创建一个新字典，以序列seq中元素做字典的键，val为字典所有键对应的初始值
           4	radiansdict.get(key, default=None)
             返回指定键的值，如果值不在字典中返回default值
           5	key in dict
             如果键在字典dict里返回true，否则返回false
           6	radiansdict.items()
             以列表返回可遍历的(键, 值) 元组数组
           7	radiansdict.keys()
             返回一个迭代器，可以使用 list() 来转换为列表
           8	radiansdict.setdefault(key, default=None)
             和get()类似, 但如果键不存在于字典中，将会添加键并将值设为default
           9	radiansdict.update(dict2)
             把字典dict2的键/值对更新到dict里
           10	radiansdict.values()
             返回一个迭代器，可以使用 list() 来转换为列表
           11	pop(key[,default])
             删除字典给定键 key 所对应的值，返回值为被删除的值。key值必须给出。 否则，返回default值。
           12	popitem()
             随机返回并删除字典中的最后一对键和值。
     5.集合内置方法
        add()	为集合添加元素
        clear()	移除集合中的所有元素
        copy()	拷贝一个集合
        difference()	返回多个集合的差集
        difference_update()	移除集合中的元素，该元素在指定的集合也存在。
        discard()	删除集合中指定的元素
        intersection()	返回集合的交集
        intersection_update()	返回集合的交集。
        isdisjoint()	判断两个集合是否包含相同的元素，如果没有返回 True，否则返回 False。
        issubset()	判断指定集合是否为该方法参数集合的子集。
        issuperset()	判断该方法的参数集合是否为指定集合的子集
        pop()	随机移除元素
        remove()	移除指定元素
        symmetric_difference()	返回两个集合中不重复的元素集合。
        symmetric_difference_update()	移除当前集合中在另外一个指定集合相同的元素，并将另外一个指定集合中不同的元素插入到当前集合中。
        union()	返回两个集合的并集
        update()	给集合添加元素
     6.斐波那契数列
            #!/usr/bin/python3
            # Fibonacci series: 斐波纳契数列
            # 两个元素的总和确定了下一个数
            a, b = 0, 1
            while b < 1000:
                print(b, end=',')
                a, b = b, a+b
      
     7.迭代器与生成器
        a、迭代器
           class MyNumbers:
              def __iter__(self):
                self.a = 1
                return self

              def __next__(self):
                if self.a <= 20:
                  x = self.a
                  self.a += 1
                  return x
                else:
                  raise StopIteration

            myclass = MyNumbers()
            myiter = iter(myclass)

            for x in myiter:
              print(x)
        b、生成器
           
     8.文件
       a、Python3 OS 文件/目录方法
         os.access(path, mode)
         检验权限模式
         os.chdir(path)
         改变当前工作目录
         os.chflags(path, flags)
         设置路径的标记为数字标记。
         os.chmod(path, mode)
         更改权限
         os.chown(path, uid, gid)
         更改文件所有者
         os.chroot(path)
         改变当前进程的根目录
         os.close(fd)
         关闭文件描述符 fd
         os.closerange(fd_low, fd_high)
         关闭所有文件描述符，从 fd_low (包含) 到 fd_high (不包含), 错误会忽略
         os.dup(fd)
         复制文件描述符 fd
         os.dup2(fd, fd2)
         将一个文件描述符 fd 复制到另一个 fd2
         os.fchdir(fd)
         通过文件描述符改变当前工作目录
         os.fchmod(fd, mode)
         改变一个文件的访问权限，该文件由参数fd指定，参数mode是Unix下的文件访问权限。
         os.fchown(fd, uid, gid)
         修改一个文件的所有权，这个函数修改一个文件的用户ID和用户组ID，该文件由文件描述符fd指定。
         os.fdatasync(fd)
         强制将文件写入磁盘，该文件由文件描述符fd指定，但是不强制更新文件的状态信息。
         os.fdopen(fd[, mode[, bufsize]])
         通过文件描述符 fd 创建一个文件对象，并返回这个文件对象
         os.fpathconf(fd, name)
         返回一个打开的文件的系统配置信息。name为检索的系统配置的值，它也许是一个定义系统值的字符串，这些名字在很多标准中指定（POSIX.1, Unix 95, Unix 98, 和其它）。
         os.fstat(fd)
         返回文件描述符fd的状态，像stat()。
         os.fstatvfs(fd)
         返回包含文件描述符fd的文件的文件系统的信息，Python 3.3 相等于 statvfs()。
         os.fsync(fd)
         强制将文件描述符为fd的文件写入硬盘。
         os.ftruncate(fd, length)
         裁剪文件描述符fd对应的文件, 所以它最大不能超过文件大小。
         os.getcwd()
         返回当前工作目录
         os.getcwdu()
         返回一个当前工作目录的Unicode对象
         os.isatty(fd)
         如果文件描述符fd是打开的，同时与tty(-like)设备相连，则返回true, 否则False。
         os.lchflags(path, flags)
         设置路径的标记为数字标记，类似 chflags()，但是没有软链接
         os.lchmod(path, mode)
         修改连接文件权限
         os.lchown(path, uid, gid)
         更改文件所有者，类似 chown，但是不追踪链接。
         os.link(src, dst)
         创建硬链接，名为参数 dst，指向参数 src
         os.listdir(path)
         返回path指定的文件夹包含的文件或文件夹的名字的列表。
         os.lseek(fd, pos, how)
         设置文件描述符 fd当前位置为pos, how方式修改: SEEK_SET 或者 0 设置从文件开始的计算的pos; SEEK_CUR或者 1 则从当前位置计算; os.SEEK_END或者2则从文件尾部开始. 在unix，Windows中有效
         os.lstat(path)
         像stat(),但是没有软链接
         os.major(device)
         从原始的设备号中提取设备major号码 (使用stat中的st_dev或者st_rdev field)。
         os.makedev(major, minor)
         以major和minor设备号组成一个原始设备号
         os.makedirs(path[, mode])
         递归文件夹创建函数。像mkdir(), 但创建的所有intermediate-level文件夹需要包含子文件夹。
         os.minor(device)
         从原始的设备号中提取设备minor号码 (使用stat中的st_dev或者st_rdev field )。
         os.mkdir(path[, mode])
         以数字mode的mode创建一个名为path的文件夹.默认的 mode 是 0777 (八进制)。
         os.mkfifo(path[, mode])
         创建命名管道，mode 为数字，默认为 0666 (八进制)
         os.mknod(filename[, mode=0600, device])
         创建一个名为filename文件系统节点（文件，设备特别文件或者命名pipe）。
         os.open(file, flags[, mode])
         打开一个文件，并且设置需要的打开选项，mode参数是可选的
         os.openpty()
         打开一个新的伪终端对。返回 pty 和 tty的文件描述符。
         os.pathconf(path, name)
         返回相关文件的系统配置信息。
         os.pipe()
         创建一个管道. 返回一对文件描述符(r, w) 分别为读和写
         os.popen(command[, mode[, bufsize]])
         从一个 command 打开一个管道
         os.read(fd, n)
         从文件描述符 fd 中读取最多 n 个字节，返回包含读取字节的字符串，文件描述符 fd对应文件已达到结尾, 返回一个空字符串。
         os.readlink(path)
         返回软链接所指向的文件
         os.remove(path)
         删除路径为path的文件。如果path 是一个文件夹，将抛出OSError; 查看下面的rmdir()删除一个 directory。
         os.removedirs(path)
         递归删除目录。
         os.rename(src, dst)
         重命名文件或目录，从 src 到 dst
         os.renames(old, new)
         递归地对目录进行更名，也可以对文件进行更名。
         os.rmdir(path)
         删除path指定的空目录，如果目录非空，则抛出一个OSError异常。
         os.stat(path)
         获取path指定的路径的信息，功能等同于C API中的stat()系统调用。
         os.stat_float_times([newvalue])
         决定stat_result是否以float对象显示时间戳
         os.statvfs(path)
         获取指定路径的文件系统统计信息
         os.symlink(src, dst)
         创建一个软链接
         os.tcgetpgrp(fd)
         返回与终端fd（一个由os.open()返回的打开的文件描述符）关联的进程组
         os.tcsetpgrp(fd, pg)
         设置与终端fd（一个由os.open()返回的打开的文件描述符）关联的进程组为pg。
         os.tempnam([dir[, prefix]])
         Python3 中已删除。返回唯一的路径名用于创建临时文件。
         os.tmpfile()
         Python3 中已删除。返回一个打开的模式为(w+b)的文件对象 .这文件对象没有文件夹入口，没有文件描述符，将会自动删除。
         os.tmpnam()
         Python3 中已删除。为创建一个临时文件返回一个唯一的路径
         os.ttyname(fd)
         返回一个字符串，它表示与文件描述符fd 关联的终端设备。如果fd 没有与终端设备关联，则引发一个异常。
         os.unlink(path)
         删除文件路径
         os.utime(path, times)
         返回指定的path文件的访问和修改的时间。
         os.walk(top[, topdown=True[, onerror=None[, followlinks=False]]])
         输出在文件夹中的文件名通过在树中游走，向上或者向下。
         os.write(fd, str)
         写入字符串到文件描述符 fd中. 返回实际写入的字符串长度
         os.path 模块
         获取文件的属性信息。
    9.实例
         a、数字求和
            num1 = input("请输入第一个数字：")
            num2 = input("请输入第二个数字：")
            num = float(num1)+float(num2)
            print('两个数字 {0} , {1} 总和： {2} '.format(num1,num2,num))
         b、平方根(取小数点后三位)
            num = float(input('请输入一个数字： '))
            num_sqrt = num ** 0.5
            print(' %0.3f 的平方根为 %0.3f'%(num ,num_sqrt))
         c、二次方程
            # 二次方程式 ax**2 + bx + c = 0
            # a、b、c 用户提供，为实数，a ≠ 0

            # 导入 cmath(复杂数学运算) 模块
            import cmath

            a = float(input('输入 a: '))
            b = float(input('输入 b: '))
            c = float(input('输入 c: '))

            # 计算
            d = (b**2) - (4*a*c)

            # 两种求解方式
            sol1 = (-b-cmath.sqrt(d))/(2*a)
            sol2 = (-b+cmath.sqrt(d))/(2*a)

            print('结果为 {0} 和 {1}'.format(sol1,sol2))
         d、计算三角形面积
            a = float(input('输入三角形第一边长: '))
            b = float(input('输入三角形第二边长: '))
            c = float(input('输入三角形第三边长: '))

            # 计算半周长
            s = (a + b + c) / 2

            # 计算面积
            area = (s*(s-a)*(s-b)*(s-c)) ** 0.5
            print('三角形面积为 %0.2f' %area)
         e、计算圆的面积
            def findArea(r): 
                PI = 3.142
                return PI * (r*r)

            # 调用方法
            print("圆的面积为 %.6f" % findArea(5)) 
         f、生成随机数
            # 生成 0 ~ 9 之间的随机数
 
            # 导入 random(随机数) 模块
            import random

            print(random.randint(0,9))
         g、摄氏温度转为华氏温度
            # 接收用户输入
            celsius = float(input('输入摄氏温度: '))

            # 计算华氏温度
            fahrenheit = (celsius * 1.8) + 32
            print('%0.1f 摄氏温度转为华氏温度为 %0.1f ' %(celsius,fahrenheit))
         h、交换变量
            x = input('输入 x 值: ')
            y = input('输入 y 值: ')

            # 不使用临时变量
            x,y = y,x

            print('交换后 x 的值为: {}'.format(x))
            print('交换后 y 的值为: {}'.format(y))
         i、判断字符串是否为数字
            def is_numer(num):
             try:
                 float(num)
                 return True
             except ValueError:
                 pass
             try:
                 import unicodedata          #引用字符数据库
                 unicodedata.numeric(num)
                 return True
             except (TypeError,ValueError):
                 pass
             return False
         j、判断奇数偶数
            num = int(input("输入一个数字: "))
            if (num % 2) == 0:
               print("{0} 是偶数".format(num))
            else:
               print("{0} 是奇数".format(num))
         k、判断是否是闰年
            year = int(input("输入一个年份: "))
            if (year % 4) == 0:
               if (year % 100) == 0:
                   if (year % 400) == 0:
                       print("{0} 是闰年".format(year))   # 整百年能被400整除的是闰年
                   else:
                       print("{0} 不是闰年".format(year))
               else:
                   print("{0} 是闰年".format(year))       # 非整百年能被4整除的为闰年
            else:
               print("{0} 不是闰年".format(year))
         l、获取最大值函数
            print(max(1, 2))
            print(max('a', 'b'))
         m、判断数字是否是质数
            # Python 程序用于检测用户输入的数字是否为质数
 
            # 用户输入数字
            num = int(input("请输入一个数字: "))

            # 质数大于 1
            if num > 1:
               # 查看因子
               for i in range(2,num):
                   if (num % i) == 0:
                       print(num,"不是质数")
                       print(i,"乘于",num//i,"是",num)
                       break
               else:
                   print(num,"是质数")

            # 如果输入的数字小于或等于 1，不是质数
            else:
               print(num,"不是质数")
         n、输出指定范围的素数
            # 输出指定范围内的素数
 
            # take input from the user
            lower = int(input("输入区间最小值: "))
            upper = int(input("输入区间最大值: "))

            for num in range(lower,upper + 1):
                # 素数大于 1
                if num > 1:
                    for i in range(2,num):
                        if (num % i) == 0:
                            break
                    else:
                        print(num)
         o、计算某一个数的阶乘
            # 通过用户输入数字计算阶乘
 
            # 获取用户输入的数字
            num = int(input("请输入一个数字: "))
            factorial = 1

            # 查看数字是负数，0 或 正数
            if num < 0:
               print("抱歉，负数没有阶乘")
            elif num == 0:
               print("0 的阶乘为 1")
            else:
               for i in range(1,num + 1):
                   factorial = factorial*i
               print("%d 的阶乘为 %d" %(num,factorial))
         p、九九乘法表
            # 九九乘法表
            for i in range(1, 10):
                for j in range(1, i+1):
                    print('{}x{}={}\t'.format(j, i, i*j), end='')
                print()
         q、实现斐波那契数列
            # Python 斐波那契数列实现
 
            # 获取用户输入数据
            nterms = int(input("你需要几项？"))

            # 第一和第二项
            n1 = 0
            n2 = 1
            count = 2

            # 判断输入的值是否合法
            if nterms <= 0:
               print("请输入一个正整数。")
            elif nterms == 1:
               print("斐波那契数列：")
               print(n1)
            else:
               print("斐波那契数列：")
               print(n1,",",n2,end=" , ")
               while count < nterms:
                   nth = n1 + n2
                   print(nth,end=" , ")
                   # 更新值
                   n1 = n2
                   n2 = nth
                   count += 1
         r、判断数字是否为阿姆斯特朗数
            # Python 检测用户输入的数字是否为阿姆斯特朗数
 
            # 获取用户输入的数字
            num = int(input("请输入一个数字: "))

            # 初始化变量 sum
            sum = 0
            # 指数
            n = len(str(num))

            # 检测
            temp = num
            while temp > 0:
               digit = temp % 10
               sum += digit ** n
               temp //= 10

            # 输出结果
            if num == sum:
               print(num,"是阿姆斯特朗数")
            else:
               print(num,"不是阿姆斯特朗数")
         s、十进制转二进制、八进制和十六进制
            # 获取用户输入十进制数
            dec = int(input("输入数字："))

            print("十进制数为：", dec)
            print("转换为二进制为：", bin(dec))
            print("转换为八进制为：", oct(dec))
            print("转换为十六进制为：", hex(dec))
         t、ASCLL码值和字符之间的相互转换
            # 用户输入字符
            c = input("请输入一个字符: ")

            # 用户输入ASCII码，并将输入的数字转为整型
            a = int(input("请输入一个ASCII码: "))


            print( c + " 的ASCII 码为", ord(c))
            print( a , " 对应的字符为", chr(a))
         u、求两个数的最大公约数
            # 定义一个函数
            def hcf(x, y):
               """该函数返回两个数的最大公约数"""

               # 获取最小值
               if x > y:
                   smaller = y
               else:
                   smaller = x

               for i in range(1,smaller + 1):
                   if((x % i == 0) and (y % i == 0)):
                       hcf = i

               return hcf


            # 用户输入两个数字
            num1 = int(input("输入第一个数字: "))
            num2 = int(input("输入第二个数字: "))

            print( num1,"和", num2,"的最大公约数为", hcf(num1, num2))
         v、简单计算器的实现
            # 定义函数
            def add(x, y):
               """相加"""
               return x + y
            def subtract(x, y):
               """相减"""
               return x - y
            def multiply(x, y):
               """相乘"""
               return x * y
            def divide(x, y):
               """相除"""
               return x / y
            # 用户输入
            print("选择运算：")
            print("1、相加")
            print("2、相减")
            print("3、相乘")
            print("4、相除")
            choice = input("输入你的选择(1/2/3/4):")
            num1 = int(input("输入第一个数字: "))
            num2 = int(input("输入第二个数字: "))
            if choice == '1':
               print(num1,"+",num2,"=", add(num1,num2))
            elif choice == '2':
               print(num1,"-",num2,"=", subtract(num1,num2))
            elif choice == '3':
               print(num1,"*",num2,"=", multiply(num1,num2))
            elif choice == '4':
               print(num1,"/",num2,"=", divide(num1,num2))
            else:
               print("非法输入")
         w、生成日历
            # 引入日历模块
            import calendar

            # 输入指定年月
            yy = int(input("输入年份: "))
            mm = int(input("输入月份: "))

            # 显示日历
            print(calendar.month(yy,mm))
         x、获取昨天的日期
            # 引入 datetime 模块
            import datetime
            def getYesterday(): 
                today=datetime.date.today() 
                oneday=datetime.timedelta(days=1) 
                yesterday=today-oneday  
                return yesterday

            # 输出
            print(getYesterday())
         y、获取两个数字的最小公倍数
            def lcm(x, y):
               #  获取最大的数
               if x > y:
                   greater = x
               else:
                   greater = y
               while(True):
                   if((greater % x == 0) and (greater % y == 0)):
                       lcm = greater
                       break
                   greater += 1

               return lcm


            # 获取用户输入
            num1 = int(input("输入第一个数字: "))
            num2 = int(input("输入第二个数字: "))

            print( num1,"和", num2,"的最小公倍数为", lcm(num1, num2))
         z、
            
